buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    //id 'org.springframework.boot' version '2.7.3'
    //id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id "com.github.node-gradle.node" version "3.4.0"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'jacoco'
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

node  {
    download = true
    version = "16.16.0"
    npmInstallCommand = "install"
    nodeProjectDir  = file("${project.projectDir}/src/main/resources/static")
}

group = 'com.teamy'
version = '1.0.2-SNAPSHOT' + new Date().format("-yyyyMMddHHmmss")
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    //runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'

// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"


    // modelmapper
    implementation 'org.modelmapper:modelmapper:2.1.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // archunit
    testImplementation 'com.tngtech.archunit:archunit:1.0.0-rc1'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.0.0-rc1'

    // testcontainers
    //testImplementation "org.testcontainers:junit-jupiter:1.17.3"
    //testImplementation "org.testcontainers:postgresql:1.17.3"


}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jar {
    enabled = false
    archiveClassifier = ''
}

/**
 * QueryDSL
 */

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true // use JPA or not
    querydslSourcesDir = querydslDir
}

// sourceSet when it build
sourceSets {
    main.java.srcDir querydslDir
}

// compile options
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

// to inherit compileClassPath
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}